/** @define utilities */

/* Applies to flex container
   ========================================================================== */

/**
 * Container
 */

 .flex {
    display: flex ;
  }
  
  .flex-inline {
    display: inline-flex ;
  }
  
  /**
   * Direction: row
   */
  
  .flex-row {
    flex-direction: row ;
  }
  
  .flex-row-reverse {
    flex-direction: row-reverse ;
  }
  
  /**
   * Direction: column
   */
  
  .flex-col {
    flex-direction: column ;
  }
  
  .flex-col--weverse {
    flex-direction: column-reverse ;
  }
  
  /**
   * Wrap
   */
  
  .flex-wrap {
    flex-wrap: wrap ;
  }
  
  .flex-no-wrap {
    flex-wrap: nowrap ;
  }
  
  .flex-wrap-reverse {
    flex-wrap: wrap-reverse ;
  }
  
  /**
   * Align items along the main axis of the current line of the flex container
   */
  
  .flex-justify-start {
    justify-content: flex-start ;
  }
  
  .flex-justify-end {
    justify-content: flex-end ;
  }
  
  .flex-justify-center {
    justify-content: center ;
  }
  
  .flex-justify-between {
    justify-content: space-between ;
  }
  
  .flex-justify-around {
    justify-content: space-around ;
  }
  
  /**
   * Align items in the cross axis of the current line of the flex container
   * Similar to `justify-content` but in the perpendicular direction
   */
  
  .flex-align-items-start {
    align-items: flex-start ;
  }
  
  .flex-align-items-end {
    align-items: flex-end ;
  }
  
  .flex-align-items-center {
    align-items: center ;
  }
  
  .flex-align-items-stretch {
    align-items: stretch ;
  }
  
  .flex-align-items-baseline {
    align-items: baseline ;
  }
  
  /**
   * Aligns items within the flex container when there is extra
   * space in the cross-axis
   *
   * Has no effect when there is only one line of flex items.
   */
  
  .flex-align-content--itart {
    align-content: flex-start ;
  }
  
  .flex-align-content-end {
    align-content: flex-end ;
  }
  
  .flex-align-content-center {
    align-content: center ;
  }
  
  .flex-align-content-stretch {
    align-content: stretch ;
  }
  
  .flex-align-content-between {
    align-content: space-between ;
  }
  
  .flex-align-content-around {
    align-content: space-around ;
  }
  
  /* Applies to flex items
     ========================================================================== */
  
  /**
   * Override default alignment of single item when specified by `align-items`
   */
  
  .flex-align-self-start {
    align-self: flex-start ;
  }
  
  .flex-align-self-end {
    align-self: flex-end ;
  }
  
  .flex-align-self-center {
    align-self: center ;
  }
  
  .flex-align-self-stretch {
    align-self: stretch ;
  }
  
  .flex-align-self-baseline {
    align-self: baseline ;
  }
  
  .flex-align-self-auto {
    align-self: auto ;
  }
  
  /**
   * Change order without editing underlying HTML
   */
  
  .flex-order-first {
    order: -1 ;
  }
  
  .flex-order-last {
    order: 1 ;
  }
  
  .flex-order-none {
    order: 0 ;
  }
  
  /**
   * Specify the flex grow factor, which determines how much the flex item will
   * grow relative to the rest of the flex items in the flex container.
   *
   * Supports 1-5 proportions
   *
   * 1. Provide all values to avoid IE10 bug with shorthand flex
   *    - http://git.io/vllC7
   *
   *    Use `0%` to avoid bug in IE10/11 with unitless flex basis. Using this
   *    instead of `auto` as this matches what the default would be with `flex`
   *    shorthand - http://git.io/vllWx
   */
  
  .flex-grow-1 {
    flex: 1 1 0% ; /* 1 */
  }
  
  .flex-grow-2 {
    flex: 2 1 0% ;
  }
  
  .flex-grow-3 {
    flex: 3 1 0% ;
  }
  
  .flex-grow-4 {
    flex: 4 1 0% ;
  }
  
  .flex-grow-5 {
    flex: 5 1 0% ;
  }
  
  /**
   * Specify the flex shrink factor, which determines how much the flex item will
   * shrink relative to the rest of the flex items in the flex container.
   */
  
  .flex-shrink-0 {
    flex-shrink: 0 ;
  }
  
  .flex-shrink-1 {
    flex-shrink: 1 ;
  }
  
  .flex-shrink-2 {
    flex-shrink: 2 ;
  }
  
  .flex-shrink-3 {
    flex-shrink: 3 ;
  }
  
  .flex-shrink-4 {
    flex-shrink: 4 ;
  }
  
  .flex-shrink-5 {
    flex-shrink: 5 ;
  }
  
  /**
   * Aligning with `auto` margins
   * http://www.w3.org/TR/css-flexbox-1/#auto-margins
   */
  
  .flex-expand {
    margin: auto ;
  }
  
  .flex-expand-left {
    margin-left: auto ;
  }
  
  .flex-expand-right {
    margin-right: auto ;
  }
  
  .flex-expand-top {
    margin-top: auto ;
  }
  
  .flex-expand-bottom {
    margin-bottom: auto ;
  }
  
  /**
   * Basis
   */
  
  .flex-basis-auto {
    flex-basis: auto ;
  }
  
  .flex-basis-0 {
    flex-basis: 0 ;
  }
  
  /*
   * Shorthand
   *
   * Declares all values instead of keywords like 'initial' to work around IE10
   * https://www.w3.org/TR/css-flexbox-1/#flex-common
   *
   * 1. Fixes issue in IE 10 where flex-basis is ignored - https://git.io/vllMt
   *    This ensures it overrides flex-basis set in other utilities.
   */
  
  /*
   * Sizes the item based on the width/height properties
   */
  
  .flex-initial {
    flex: 0 1 auto ;
    flex-basis: auto ; /* 1 */
  }
  
  /*
   * Sizes the item based on the width/height properties, but makes them fully
   * flexible, so that they absorb any free space along the main axis.
   */
  
  .flex-auto {
    flex: 1 1 auto ;
    flex-basis: auto ; /* 1 */
  }
  
  /*
   * Sizes the item according to the width/height properties, but makes the flex
   * item fully inflexible. Similar to initial, except that flex items are
   * not allowed to shrink, even in overflow situations.
   */
  
  .flex-none {
    flex: 0 0 auto;
    flex-basis: auto; /* 1 */
  }
  